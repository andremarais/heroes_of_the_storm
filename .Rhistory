y = 0.1,
label = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
angle = 90,
col = 'lightsteelblue4') +
annotate(geom = 'text',
x = levels(reorder(hero.win.rate$Hero, -hero.win.rate$WR))[1],
y = 0.51,
label = '50%',
col = 'lightsteelblue4') +
geom_hline(yintercept = .5, col = 'lightsteelblue3')+
xlab('Heroes') +
ylab('Win rate')
ggplot(hero.win.rate) +
geom_bar(aes(x = reorder(Hero, -WR), y = WR), stat = 'identity', fill = 'lightsteelblue1') +
theme_minimal() %+replace%
theme(axis.text.x = element_blank(),
axis.text.y = element_text() +
annotate(geom = 'text',
x = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
y = 0.1,
label = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
angle = 90,
col = 'lightsteelblue4') +
annotate(geom = 'text',
x = levels(reorder(hero.win.rate$Hero, -hero.win.rate$WR))[1],
y = 0.51,
label = '50%',
col = 'lightsteelblue4') +
geom_hline(yintercept = .5, col = 'lightsteelblue3')+
xlab('Heroes') +
ylab('Win rate')
colnames(hero.win.rate) <- c("Hero", "WR")
ggplot(hero.win.rate) +
geom_bar(aes(x = reorder(Hero, -WR), y = WR), stat = 'identity', fill = 'lightsteelblue1')
colnames(hero.win.rate) <- c("Hero", "WR")
ggplot(hero.win.rate) +
geom_bar(aes(x = reorder(Hero, -WR), y = WR), stat = 'identity', fill = 'lightsteelblue1') +
theme_minimal() %+replace%
theme(axis.text.x = element_blank(),
axis.text.y = element_text() +
annotate(geom = 'text',
x = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
y = 0.1,
label = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
angle = 90,
col = 'lightsteelblue4') +
annotate(geom = 'text',
x = levels(reorder(hero.win.rate$Hero, -hero.win.rate$WR))[1],
y = 0.51,
label = '50%',
col = 'lightsteelblue4')
ggplot(hero.win.rate) +
geom_bar(aes(x = reorder(Hero, -WR), y = WR), stat = 'identity', fill = 'lightsteelblue1') +
theme_minimal() %+replace%
theme(axis.text.x = element_blank(),
axis.text.y = element_text()) +
annotate(geom = 'text',
x = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
y = 0.1,
label = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
angle = 90,
col = 'lightsteelblue4') +
annotate(geom = 'text',
x = levels(reorder(hero.win.rate$Hero, -hero.win.rate$WR))[1],
y = 0.51,
label = '50%',
col = 'lightsteelblue4') +
geom_hline(yintercept = .5, col = 'lightsteelblue3')+
xlab('Heroes') +
ylab('Win rate')
ggplot(hero_mmr_winrate) +
geom_bar(aes(x = reorder(Hero, -MMR.Before), y = MMR.Before, fill = Is.Winner), stat = 'identity', position = 'dodge')+
theme_minimal() %+replace%
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = c('lightsteelblue1', 'lightsteelblue2')) +
annotate(geom = 'text',
x = reorder(hero_mmr_winrate$Hero, -hero_mmr_winrate$MMR.Before),
y = 200,
label = reorder(hero_mmr_winrate$Hero, -hero_mmr_winrate$MMR.Before),
angle = 90,
col = 'lightsteelblue4') +
xlab('Heroes') +
ylab('MMR Rating')
head(heroes)
enemy_team_ave_MMR <- aggregate(data = heroes, ReplayID ~ Is.Winner, mean)
head(enemy_team_ave_MMR)
enemy_team_ave_MMR <- aggregate(data = heroes, MMR.Before ~ Is.Winner + ReplayID, mean)
ave_MMR_per_side <-  enemy_team_ave_MMR
ave_MMR_per_side <- NULL
head(ave_MMR_per_side)
ave_MMR_per_side <- enemy_team_ave_MMR
enemy_team_ave_MMR <- NULL
head(ave_MMR_per_side)
head(heroes)
ave_MMR_per_side <-  aggregate(data = head(heroes, 50), 'TeamMMR' = MMR.Before ~ Is.Winner + ReplayID, mean)
colnames(ave_MMR_per_side)
colnames(ave_MMR_per_side)[3] <- 'Ave.team.MMR'
heroes <- merge(heroes, ave_MMR_per_side)
head(heroes)
model_rows <- sample(nrow(heroes), nrow(heroes) * .3)
model_rows <- sample(nrow(heroes), nrow(heroes) * .1)
training_rows <- sample(model_rows, length(model_rows)*.8)
training_rows <- sample(model_rows, length(model_rows)*.8)
gc()
train_data <- heroes[training_rows, ]
test_data <- heroes[-training_rows, ]
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Role + Difficulty + Ave.team.MMR)
plot(test_data$MMR.Before, pred(lm, test_data))
plot(test_data$MMR.Before, prediect(lm, test_data))
plot(test_data$MMR.Before, predict(lm, test_data))
predict(lm, test_data)
head(test_data)
predict(test_data, lm)
predict(test_data, MMR_model)
predict(MMR_model, test_data))
predict(MMR_model, test_data)
?plot
plot(test_data$MMR.Before, predict(MMR_model, test_data))
print()
head(heroes)
colnames(heores)[-1]
colnames(heroes)[-1]
colnames(heroes)[ncol(heroes)]
head(ave_MMR_per_side)
str(ave_MMR_per_side)
levels(ave_MMR_per_side$Is.Winner)
levels(ave_MMR_per_side$Is.Winner) <- c('True', 'False')
head(ave_MMR_per_side)
heroes <- merge(heroes, ave_MMR_per_side)
colnames(heroes
)
head(heroes)
ave_MMR_per_side <-  aggregate(data = heroes,  MMR.Before ~ Is.Winner + ReplayID, mean)
head(ave_MMR_per_side)
gc()
heroes <- read.csv("ReplaysChars.csv")
hero.info <- read.csv("heroes.csv")
heroes <- merge(heroes, hero.info, by.x ="Hero", by.y = "Hero")
heroes <- heroes[!is.na(heroes$MMR.Before), ]
heroes <- heroes[order(heroes$ReplayID, heroes$Is.Winner),]
heroes <- read.csv("ReplaysChars.csv")
getwd()
list.files()
new <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
head(new)
new2 <- read.csv('Replays 2015-12-30 - 2016-01-29.csv')
head(new2)
head(new2, 50)
head(new2, 500)
head(new2)
gc()
heroes <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
hero.info <- fromJSON('Heroes')
library(plyr)
library(ggplot2)
library(magrittr)
library(scales)
library(jsonlite)
hero.info <- fromJSON('Heroes')
heroes <- merge(heroes, hero.info[,c('PrimaryName', 'Group', 'SubGroup')], by.x ="Hero", by.y = "PrimaryName")
head(heroes)
head(hero.info)
table(heroes$HeroID)
unique(heroes$HeroID)
max(unique(heroes$HeroID))
str(heroes$HeroID)
tail(hero.info)
plot(unique(heroes$HeroID))
hist(unique(heroes$HeroID))
table(unique(heroes$HeroID))
hero.info$PrimaryName
length(unique(hero.info$PrimaryName))
length(unique(heroes$HeroID))
library(plyr)
library(ggplot2)
library(magrittr)
library(scales)
library(jsonlite)
heroes <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
hero.info <- fromJSON('Heroes')
heroes <- heroes[!is.na(heroes$MMR.Before), ]
heroes <- heroes[order(heroes$ReplayID, heroes$Is.Winner),]
str(heroes)
heroes$HeroID <- as.factor(heroes$HeroID)
replay_ss <- sample(unique(heroes$ReplayID), length(unique(heroes$ReplayID))*.01)
ave_MMR_per_side <-  aggregate(data = heroes,  MMR.Before ~ Is.Winner + ReplayID, mean)
colnames(ave_MMR_per_side)[3] <- 'Ave.team.MMR'
heroes <- merge(heroes, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
colnames(heroes)[ncol(heroes)] <- 'Same.team.MMR'
levels(ave_MMR_per_side$Is.Winner) <- c('True', 'False')
heroes <- merge(heroes, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
colnames(heroes)[ncol(heroes)] <- 'Opp.team.MMR'
heroes_ss <- heroes[heroes$ReplayID %in% replay_ss, ]
train_data <- heroes_ss[training_rows, ]
test_data <- heroes_ss[-training_rows, ]
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Role + Difficulty + Same.team.MMR + Opp.team.MMR)
training_rows <- sample(nrow(heroes_ss), nrow(heroes_ss)*.8)
train_data <- heroes_ss[training_rows, ]
test_data <- heroes_ss[-training_rows, ]
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Role + Difficulty + Same.team.MMR + Opp.team.MMR)
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner  + Difficulty + Same.team.MMR + Opp.team.MMR)
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
print(paste('RMSE:', round(mean((test_data$MMR.Before - predict(MMR_model, test_data))^2)^.5,2)))
print(paste('Out by', round(mean(abs(predict(MMR_model, heroes) - heroes$MMR.Before)), 2), 'on average'))
heroes$MMR.Before.adj <- heroes$MMR.Before
heroes$MMR.Before.adj[heroes$MMR.Before == 1700] <- predict(MMR_model, heroes[heroes2$MMR.Before == 1700, ])
heroes$MMR.Before.adj[heroes$MMR.Before == 1700] <- predict(MMR_model, heroes[heroes$MMR.Before == 1700, ])
ggplot() +
geom_density(aes(x = MMR.Before),
aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65)
library(ggplot2)
ggplot() +
geom_density(aes(x = MMR.Before),
aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65)
ggplot() +
geom_density(aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65)
ggplot(heroes) +
geom_density(aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65)
ggplot(heroes) +
geom_density(aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65) +
geom_density(aes(x = MMR.Before.adj), fill = 'indianred', alpha = .65) +
theme_minimal()
ggplot() +
geom_density(data = heroes[heroes$Is.Winner == 'True', ],
aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65) +
geom_density(data = heroes[heroes$Is.Winner == 'False', ],
aes(x = MMR.Before), fill = 'indianred', alpha = .65) +
theme_minimal()
hero.info
ggplot() +
geom_density(data = heroes[heroes$Is.Winner == 'True', ],
aes(x = MMR.Before.adj), fill = 'dodgerblue', alpha = .65) +
geom_density(data = heroes[heroes$Is.Winner == 'False', ],
aes(x = MMR.Before.adj), fill = 'indianred', alpha = .65) +
theme_minimal()
hero.win.rate <- aggregate(data = heroes, Is.Winner == 'True' ~ Hero, mean)
head(heroes)
hero.win.rate <- aggregate(data = heroes, Is.Winner == 'True' ~ HeroID, mean)
colnames(hero.win.rate) <- c("Hero", "WR")
ggplot(hero.win.rate) +
geom_bar(aes(x = reorder(Hero, -WR), y = WR), stat = 'identity', fill = 'lightsteelblue1') +
theme_minimal() %+replace%
theme(axis.text.x = element_blank(),
axis.text.y = element_text()) +
annotate(geom = 'text',
x = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
y = 0.1,
label = reorder(hero.win.rate$Hero, -hero.win.rate$WR),
angle = 90,
col = 'lightsteelblue4') +
annotate(geom = 'text',
x = levels(reorder(hero.win.rate$Hero, -hero.win.rate$WR))[1],
y = 0.51,
label = '50%',
col = 'lightsteelblue4') +
geom_hline(yintercept = .5, col = 'lightsteelblue3')+
xlab('Heroes') +
ylab('Win rate')
head(heroes)
heroes <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
head(heroes)
replays <- read.csv('Replays 2015-12-30 - 2016-01-29.csv')
head(replays)
str(replays)
substring(head(replays$Timestamp..UTC.), 1, 10)
as.Date(substring(head(replays$Timestamp..UTC.), 1, 10), '%m/%d/%Y')
replays$Timestamp..UTC. <- as.Date(substring(replays$Timestamp..UTC., 1, 10), '%m/%d/%Y')
heroes <- merge(heroes, replays[, c('ReplayID', 'Timestamp..UTC.')], by = 'ReplayID')
heroes <- heroes[!is.na(heroes$MMR.Before), ]
heroes <- heroes[order(heroes$ReplayID, heroes$Is.Winner),]
heroes$MMR.Before.adj <- heroes$MMR.Before
heroes$MMR.Before.adj[heroes$MMR.Before == 1700] <- predict(MMR_model, heroes[heroes$MMR.Before == 1700, ])
source('lm.R')
heroes$HeroID <- as.factor(heroes$HeroID)
gc()
gc()
heroes <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
replays <- read.csv('Replays 2015-12-30 - 2016-01-29.csv')
replays$Timestamp..UTC. <- as.Date(substring(replays$Timestamp..UTC., 1, 10), '%m/%d/%Y')
hero.info <- fromJSON('Heroes')
heroes <- merge(heroes, hero.info[,c('PrimaryName', 'Group', 'SubGroup')], by.x ="Hero", by.y = "PrimaryName")
heroes <- merge(heroes, replays[, c('ReplayID', 'Timestamp..UTC.')], by = 'ReplayID')
heroes <- heroes[!is.na(heroes$MMR.Before), ]
heroes <- heroes[order(heroes$ReplayID, heroes$Is.Winner),]
gc()
heroes$HeroID <- as.factor(heroes$HeroID)
replay_ss <- sample(unique(heroes$ReplayID), length(unique(heroes$ReplayID))*.01)
replay_ss <- NULL
replay_ss <- sample(unique(heroes$ReplayID), length(unique(heroes$ReplayID))*.01)
ave_MMR_per_side <-  aggregate(data = heroes,  MMR.Before ~ Is.Winner + ReplayID, mean)
colnames(ave_MMR_per_side)[3] <- 'Ave.team.MMR'
heroes <- merge(heroes, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
colnames(heroes)[ncol(heroes)] <- 'Same.team.MMR'
levels(ave_MMR_per_side$Is.Winner) <- c('True', 'False')
heroes <- merge(heroes, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
colnames(heroes)[ncol(heroes)] <- 'Opp.team.MMR'
heroes_ss <- heroes[heroes$ReplayID %in% replay_ss, ]
training_rows <- sample(nrow(heroes_ss), nrow(heroes_ss)*.8)
train_data <- heroes_ss[training_rows, ]
test_data <- heroes_ss[-training_rows, ]
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
heroes$MMR.Before.adj <- heroes$MMR.Before
heroes$MMR.Before.adj[heroes$MMR.Before == 1700] <- predict(MMR_model, heroes[heroes$MMR.Before == 1700, ])
ggplot(heroes) +
geom_density(aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65) +
geom_density(aes(x = MMR.Before.adj), fill = 'indianred', alpha = .65) +
theme_minimal()
head(heroes)
library(jsonlite)
hero.info <- fromJSON('Heroes')
View(hero.info)
write.csv(hero.info, 'hero_info.csv')
gc()
ggplot(heroes) +
geom_density(aes(x = MMR.Before), fill = 'dodgerblue', alpha = .65) +
geom_density(aes(x = MMR.Before.adj), fill = 'indianred', alpha = .65) +
theme_minimal()
hero.info <- read.csv('hero_info.csv')
hero.info
hero.info <- read.csv('hero_info.csv')
head(heroes)
heroes <- merge(heroes, hero.info, by ="HeroID")
gc()
head(heroes)
tail(heroes)
head(hero.info)
table(format(heroes$Timestamp..UTC., '%Y%m'))
table(format(heroes$Timestamp..UTC., '%Y%m%U'))
heroes <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
replays <- read.csv('Replays 2015-12-30 - 2016-01-29.csv')
hero.info <- read.csv('hero_info.csv')
heroes <- merge(heroes, hero.info, by ="HeroID")
games <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
gc()
games <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
random(100, 10)
sample(100, 10)
games_ss <- unique(games$ReplayID)[sample(len(unique(games$ReplayID)), 10000)]
games_ss <- unique(games$ReplayID)[sample(length(unique(games$ReplayID)), 10000)]
games <- games[games$ReplayID %in% unique(games$ReplayID)[sample(length(unique(games$ReplayID)), 10000)], ]
head(games)
gc()
games_info <- read.csv('Replays 2015-12-30 - 2016-01-29.csv')
games_info$Timestamp..UTC. <- as.Date(substring(games_info$Timestamp..UTC., 1, 10), '%m/%d/%Y')
hero.info <- read.csv('hero_info.csv')
games <- merge(games, hero.info, by ="HeroID")
games <- merge(games, games_info[, c('ReplayID', 'Timestamp..UTC.')], by = 'ReplayID')
games <- games[!is.na(games$MMR.Before), ]
games <- games[order(games$ReplayID, games$Is.Winner),]
haed(games)
head(games)
ave_MMR_per_side <-  aggregate(data = games,  MMR.Before ~ Is.Winner + ReplayID, mean)
colnames(ave_MMR_per_side)[3] <- 'Ave.team.MMR'
heroes <- merge(heroes, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
games <- merge(games, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
head(games)
levels(ave_MMR_per_side$Is.Winner) <- c('True', 'False')
games <- merge(games, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
colnames(heroes)[ncol(heroes)] <- 'Opp.team.MMR'
head(games)
games <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
games <- games[games$ReplayID %in% unique(games$ReplayID)[sample(length(unique(games$ReplayID)), 10000)], ]
gc()
head(games)
ave_MMR_per_side <-  aggregate(data = games,  MMR.Before ~ Is.Winner + ReplayID, mean)
colnames(ave_MMR_per_side)[3] <- 'Ave.team.MMR'
head(ave_MMR_per_side)
games <- merge(games, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
head(games)
levels(ave_MMR_per_side$Is.Winner)
levels(ave_MMR_per_side$Is.Winner) <- c('True', 'False')
head(ave_MMR_per_side)
colnames(ave_MMR_per_side$Is.Winner)
colnames(ave_MMR_per_side)
colnames(ave_MMR_per_side)[3] <- 'Opp.team.MMR'
haed(ave_MMR_per_side)
head(ave_MMR_per_side)
head(games)
games <- merge(games, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
head(games)
training_rows <- sample(nrow(games), nrow(games)*.8)
train_data <- heroes_ss[training_rows, ]
test_data <- heroes_ss[-training_rows, ]
train_data <- games[training_rows, ]
test_data <- games[-training_rows, ]
MMR_model <- lm(data = train_data, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
MMR_model <- lm(data = games, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
head(games)
colnames(games)
colnames(games)[7]
colnames(games)[8]
colnames(games)[7] <- "Same.team.MMR"
MMR_model <- lm(data = games, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
games_info <- NULL
gc()
array(0, 2)
training_rows <- array(0, nrow(games))
training_rows <- sample(nrow(games), nrow(games)*.8)
object.size(training_rows)
training_rows <- array(0, nrow(games))
object.size(training_rows)
training_rows <- array(0L, nrow(games))
object.size(training_rows)
training_rows <- sample(nrow(games), nrow(games)*.8)
object.size(training_rows)
training_rows <- sample(nrow(games), nrow(games)*.8)
train_data <- games[training_rows, ]
test_data <- games[-training_rows, ]
games_ss <- NULL
gc()
round(mean((test_data$MMR.Before - predict(MMR_model, test_data))^2)^.5,2)
library(randomForest)
rfmodel <- randomForest(data = games, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
round(mean((test_data$MMR.Before - predict(rfmodel, test_data))^2)^.5,2)
library(caret)
predictors <- c('Is.Auto.Select', 'Hero.Level', 'Is.Winner', 'Same.team.MMR', 'Opp.team.MMR')
dval <- xgb.DMatrix(data.matrix(games[training_rows, predictors]),
label = games$MMR.Before[h])
library(xgboost)
dval <- xgb.DMatrix(data.matrix(games[training_rows, predictors]),
label = games$MMR.Before[h])
dval <- xgb.DMatrix(data.matrix(games[training_rows, predictors]),
label = games$MMR.Before[training_rows])
dval <- xgb.DMatrix(data.matrix(games[-training_rows, predictors]),
label = games$MMR.Before[-training_rows])
dtrain <- xgb.DMatrix(data.matrix(games[training_rows, predictors]),
label = games$MMR.Before[training_rows])
watchlist <- list(val = dval, train = dtrain)
?xgb.train
param <- list(objective = "reg:linear",
booster = "gbtree",
eta = 0.02,
nthread = 1,
max_depth = 25,
subsample = 0.7,
colsample_bytree = 0.8,
min_child_weight = 2
)
bst <- xgb.train(params = param,
data = dtrain,
nrounds = 2000,
early.stop.round = 100,
watchlist = watchlist,
maximize = FALSE,
print.every.n = 1,
# feval = evalerror
)
round(mean((test_data$MMR.Before - predict(MMR_model, test_data))^2)^.5,2)
pred.bst <- predict(bst, data.matrix(games[-training_rows,]))
pred.bst
round(mean((test_data$MMR.Before - pred.bst)^2)^.5,2)
bst
param <- list(objective = "reg:linear",
booster = "gbtree",
eta = 0.02,
nthread = 1,
max_depth = 25,
subsample = 0.7,
colsample_bytree = 1,
min_child_weight = 5
)
bst <- xgb.train(params = param,
data = dtrain,
nrounds = 2000,
early.stop.round = 100,
watchlist = watchlist,
maximize = FALSE,
print.every.n = 1,
# feval = evalerror
)
pred.bst <- predict(bst, data.matrix(games[-training_rows,]))
round(mean((test_data$MMR.Before - pred.bst)^2)^.5,2)
pred.bst <- predict(bst, data.matrix(games[-training_rows,]))
round(mean((test_data$MMR.Before - pred.bst)^2)^.5,2)
hist(pred.bst)
plot(pred.bst)
hist( predict(rfmodel, test_data))
games <- read.csv('ReplayCharacters 2015-12-30 - 2016-01-29.csv')
ave_MMR_per_side <-  aggregate(data = nique(games[, c('MMR.Before', 'Is.Winner', 'ReplayID')],  MMR.Before ~ Is.Winner + ReplayID, mean)
ave_MMR_per_side <-  aggregate(data = unique(games[, c('MMR.Before', 'Is.Winner', 'ReplayID')]),  MMR.Before ~ Is.Winner + ReplayID, mean)
ave_MMR_per_side <-  aggregate(data = games,  MMR.Before ~ Is.Winner + ReplayID, mean)
colnames(ave_MMR_per_side)[3] <- 'Ave.team.MMR'
games <- merge(games, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
colnames(games)[ncol(heroes)] <- 'Same.team.MMR'
colnames(games)[ncol(games)] <- 'Same.team.MMR'
levels(ave_MMR_per_side$Is.Winner) <- c('True', 'False')
head(games)
colnames(ave_MMR_per_side)[3] <- 'Opp.team.MMR'
games <- merge(games, ave_MMR_per_side, by = c('ReplayID', 'Is.Winner'))
training_rows <- sample(nrow(games), nrow(games)*.008)
model_replays <- sample(unique(games$ReplayID), length(unique(games$ReplayID))*.01)
model_data <- games[games$ReplayID %in% model_replays, ]
training_rows <- sample(nrow(model_data), nrow(model_data) * .8)
train_data <- games[training_rows, ]
test_data <- games[-training_rows, ]
MMR_model <- lm(data = games, MMR.Before ~  Is.Auto.Select + Hero.Level + Is.Winner + Same.team.MMR + Opp.team.MMR)
games$MMR.Before.2 <- predict(MMR_model, games)
train_data <- NULL
test_data <- NULL
model_data <- NULL
gc()
games$MMR.Before.2 <- predict(MMR_model, games)
games$MMR.Before.2 <- games$MMR.Before
games$MMR.Before.2[games$MMR.Before == 1700] <- predict(MMR_model, games[games$MMR.Before == 1700], )
games$MMR.Before.2[games$MMR.Before == 1700] <- predict(MMR_model, games[games$MMR.Before == 1700, ])
games$MMR.Before.2[games$MMR.Before == 1700] <- predict(MMR_model, games[games$MMR.Before == 1700, ])
gc()
plot(density(games$MMR.Before))
lines(density(games$MMR.Before.2))
lines(density(games$MMR.Before.2), col = 'red')
write.csv(games, 'games.csv')
head(games)
