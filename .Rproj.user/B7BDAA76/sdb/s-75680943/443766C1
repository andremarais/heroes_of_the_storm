{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(scales)\nsource('www/multiplot.R')\n\nhero_winrate <- read.csv('data/MMR_hero_overtime.csv')\nhero_winrate$Game.Date <- as.Date(as.character(hero_winrate$Game.Date), '%Y-%m-%d')\nheroes <- read.csv('data/hero_info.csv')\nhero_winrate <- merge(hero_winrate, heroes[ ,c('HeroID', 'PrimaryName')], by='HeroID', all.x=T)\nWinningMMRperHero <- read.csv('data/WinningMMRperHero.csv')\nauto <-read.csv('data/Auto.csv')\n\nHeroLevel_MMR <- read.csv('data/HeroLevel_MMR.csv')\nHeroLevel_Diff <- read.csv('data/HeroLevel_Diff.csv')\nlevels(HeroLevel_Diff$Difficulty) <- c('Easy', 'Medium', 'Hard', 'Very Hard')\nHeroLevel_Group <- read.csv('data/HeroLevel_Group.csv')\nHeroLevel_SubGroup <- read.csv('data/HeroLevel_SubGroup.csv')\n\npop <- read.csv('data/Popularity.csv')\nlevels(pop$Difficulty) <- c('Easy', 'Medium', 'Hard', 'Very Hard')\npop <- aggregate(data = pop, X0~ PrimaryName + Group + Difficulty, mean)\n\n\nGroup_diff <- read.csv('data/Group_diff.csv')\n\n\nplot_colors_fill <- c('dodgerblue2',\n                      'indianred2',\n                      'goldenrod3',\n                      'palegreen3'\n)\n\nplot_colors_outline <- c('dodgerblue4',\n                         'indianred4',\n                         'goldenrod4',\n                         'palegreen4'\n)\n\nshinyServer(\n  function(input, output) {\n    \n\n    output$hotsplot <- renderPlot({\n      \n      \n      \n      # Plot for Hero MMR rating over time\n      if (input$HotsSelectInput == 'Hero MMR rating' & input$HeroMMRRadio == 'Over time') {\n        \n        ggplot(hero_winrate[hero_winrate$Game.Date == input$HeroMMRSlider, ]) + \n          geom_bar(aes(x = reorder(PrimaryName, -Adj.MMR.Before), y = Adj.MMR.Before, fill = Group, col = Group), stat = 'identity', alpha = .55)+\n          theme_minimal() %+replace% \n          theme(axis.text.x = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff')\n                ) +\n          annotate(geom = 'text', \n                   x = reorder(hero_winrate[hero_winrate$Game.Date == input$HeroMMRSlider, 'PrimaryName'], -hero_winrate[hero_winrate$Game.Date == input$HeroMMRSlider, 'Adj.MMR.Before']), \n                   y = 500, \n                   label = reorder(hero_winrate[hero_winrate$Game.Date == input$HeroMMRSlider, 'PrimaryName'], -hero_winrate[hero_winrate$Game.Date == input$HeroMMRSlider, 'Adj.MMR.Before']), \n                   angle = 90,\n                   col = 'black', size = 5) +\n          xlab('Heroes') +\n          ylab('MMR Rating') + \n          scale_fill_manual(values = plot_colors_fill) +\n          scale_color_manual(values = plot_colors_outline)\n        \n      } \n      \n      # Plot for Hero MMR rating over win rate\n      else if (input$HotsSelectInput == 'Hero MMR rating' & input$HeroMMRRadio == 'Win vs loose' ){\n        ggplot(WinningMMRperHero) + \n          geom_bar(aes(x = reorder(PrimaryName, - Adj.MMR.Before), \n                       y = Adj.MMR.Before, fill = Is.Winner, col = Is.Winner), \n                   stat = 'identity', position = 'dodge', alpha = .55) +\n          annotate(geom = 'text', \n                   x = reorder(WinningMMRperHero$PrimaryName, - WinningMMRperHero$Adj.MMR.Before), \n                   y = 500, \n                   label = reorder(WinningMMRperHero$PrimaryName, - WinningMMRperHero$Adj.MMR.Before), \n                   angle = 90,\n                   col = 'black', size = 5) +\n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                legend.position = 'none',\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff')) + \n          scale_fill_manual(values = plot_colors_fill) +\n          scale_color_manual(values = plot_colors_outline) +\n          ggtitle('Average MMR rating of heores played') +\n          xlab('Blue: Won game | Red: Lost game') +\n          ylab('MMR Before game')\n        \n        \n      }\n      \n      # Plot for auto select over win rate\n      else if (input$HotsSelectInput == 'Auto selected heroes'){\n        ggplot(auto) + \n          geom_bar(aes(x = reorder(PrimaryName, -Is.Winner), \n                       y = Is.Winner, \n                       fill = Is.Auto.Select,\n                       col = Is.Auto.Select), \n                   stat = 'identity', position = 'dodge',\n                   alpha = .65)+\n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                axis.title.y = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff'))+\n          scale_fill_manual(values = plot_colors_fill) + \n          scale_color_manual(values = plot_colors_outline) +\n          scale_y_continuous(labels = percent)+\n          xlab('Hero') +\n          annotate(geom = 'text', \n                   x = reorder(auto$PrimaryName, -auto$Is.Winner), \n                   y = max(auto$Is.Winner)*.01, \n                   hjust = 0,\n                   label = reorder(auto$PrimaryName, -auto$Is.Winner), \n                   angle = 90,\n                   col = 'black',\n                   size = 5) +\n          ggtitle('Win rate of auto selected heroes') +\n          geom_hline(yintercept = .5, col = 'dodgerblue4') +\n          annotate(geom = 'text', \n                   x = 0, \n                   y = .5, \n                   hjust = -1,\n                   vjust = -1,\n                   label = '50%',\n                   size = 5, col = 'dodgerblue4') \n        \n        \n      }\n      \n      # Plot for Hero popularity\n      else if (input$HotsSelectInput == 'Hero popularity'){\n        ggplot(pop) + \n          geom_bar(aes_string(x = reorder(pop$PrimaryName, -pop$X0), \n                              y = pop$X0, \n                              fill = input$PopRadio,\n                              col = input$PopRadio), \n                   stat = 'identity',\n                   alpha = .55) +\n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                axis.title.y = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff'))+\n          scale_fill_manual(values = plot_colors_fill) + \n          scale_color_manual(values = plot_colors_outline) +\n          xlab('Hero') +\n          annotate(geom = 'text', \n                   x = reorder(pop$PrimaryName, -pop$X0), \n                   y = max(pop$X0)*.01, \n                   hjust = 0,\n                   label = reorder(pop$PrimaryName, -pop$X0), \n                   angle = 90,\n                   col = 'black') +\n          ggtitle('Hero popularity')\n        \n        \n        \n      }\n      \n      \n      else if (input$HotsSelectInput == 'Win rate per role per map') {\n        \n        ggplot(Group_diff) + \n          geom_bar(aes(x = Group, y = Group.difference, fill = Group.difference, col = Group.difference), stat = 'identity', position = 'dodge') +\n          facet_grid(.~Map.Name) +\n          scale_fill_continuous(low = 'indianred1', high = 'royalblue1') +\n          scale_color_continuous(low = 'indianred3', high = 'royalblue3') +\n          theme_light() %+replace% \n          theme(axis.text.x = element_text(angle = 90,\n                                           color = 'black'), \n                # strip.text.x = element_text(color = '#009cff', lineheight = 15, size = 15),\n                # strip.background = element_rect(fill = 'red', heightDetails),\n                legend.position = 'none', \n                axis.text.y = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff')) +\n          ylab('Team composition') +\n          xlab('Role') + \n          ggtitle('Team composition over maps') \n        \n        \n      } \n      \n      else if (input$HotsSelectInput == 'Hero level') {\n        \n        \n        HM <- ggplot(HeroLevel_MMR) + \n          geom_bar(aes(x = Hero.Level, y = Adj.MMR.Before), stat = 'identity', \n                   fill = 'dodgerblue2', col = 'dodgerblue4', alpha = .55) + \n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                axis.title = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff'))+\n          xlab('Hero Level') +\n          ylab('Average MMR') + \n          ggtitle('Average MMR over hero level') +\n          annotate(geom = 'text',\n                   x = 0:4*5,\n                   label = 0:4*5,\n                   y = 0,\n                   vjust = 0,\n                   size = 5)\n        \n        HD <- ggplot(HeroLevel_Diff) + \n          geom_bar(aes(x = Difficulty, y = Hero.Level), stat = 'identity', \n                   fill = 'dodgerblue2', col = 'dodgerblue4', alpha = .55) + \n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                axis.title = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff'))+\n          xlab('Difficulty') +\n          ylab('Average hero level') + \n          ggtitle('Average hero level over difficulty') +\n          annotate(geom = 'text',\n                   x = HeroLevel_Diff$Difficulty,\n                   label = HeroLevel_Diff$Difficulty,\n                   y = 0,\n                   hjust = 0,\n                   angle = 90,\n                   size = 5)\n        \n        HG <- ggplot(HeroLevel_Group) + \n          geom_bar(aes(x = reorder(Group, -Hero.Level), y = Hero.Level), stat = 'identity', \n                   fill = 'dodgerblue2', col = 'dodgerblue4', alpha = .55) + \n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                axis.title = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff'))+\n          xlab('Role') +\n          ylab('Average hero level') + \n          ggtitle('Average hero level over hero role') +\n          annotate(geom = 'text',\n                   x = reorder(HeroLevel_Group$Group, -HeroLevel_Group$Hero.Level),\n                   label = reorder(HeroLevel_Group$Group, -HeroLevel_Group$Hero.Level),\n                   y = 0,\n                   hjust = 0,\n                   angle = 90,\n                   size = 5)\n        \n        HS <- ggplot(HeroLevel_SubGroup) +\n          geom_bar(aes(x = reorder(SubGroup, -Hero.Level), \n                       y = Hero.Level), stat = 'identity', \n                   fill = 'dodgerblue2', col = 'dodgerblue4', alpha = .55) + \n          theme_minimal() %+replace%\n          theme(axis.text.x = element_blank(),\n                axis.title = element_blank(),\n                plot.background = element_rect(fill = '#808080', color = '#494794'),\n                panel.grid.major = element_line(colour = '#009cff'),\n                panel.grid.minor = element_line(colour = '#009cff'))+\n          xlab('Sub-role') +\n          ylab('Average hero level') + \n          ggtitle('Average hero level over hero sub-role')+\n          annotate(geom = 'text',\n                   x = reorder(HeroLevel_SubGroup$SubGroup, -HeroLevel_SubGroup$Hero.Level),\n                   label = reorder(HeroLevel_SubGroup$SubGroup, -HeroLevel_SubGroup$Hero.Level),\n                   y = 0,\n                   hjust = 0,\n                   angle = 90,\n                   size = 5)\n        \n        \n        multiplot(HM,HD,HG,HS, cols=2)\n        \n        \n      } \n      \n    })\n    \n    \n    output$imagespace1 <- renderImage({\n      fm <- normalizePath(file.path('png_files/blank.png'))\n      if (input$HotsSelectInput == \"Game duration\")  {\n        # fm <- normalizePath(file.path('png_files/MMR_herolvl.png'))\n        fm <- normalizePath(file.path(paste('png_files/maps/', input$SelectMap, '.png', sep = '')))\n        \n      }\n      list(src = fm)\n    },\n    deleteFile = F\n    )\n    \n    output$imagespace2 <- renderImage({\n      fm <- normalizePath(file.path('png_files/blank.png'))\n      if (input$HotsSelectInput == \"Game duration\")  {\n        # fm <- normalizePath(file.path('png_files/MMR_herolvl.png'))\n        fm <- normalizePath(file.path(paste('png_files/maps/', input$SelectMap2, '.png', sep = '')))\n        \n      }\n      list(src = fm)\n    },\n    deleteFile = F\n    )\n    \n    observeEvent(input$HotsSelectInput, if(input$HotsSelectInput %in% c('Game duration')) hide('hotsplot') else show('hotsplot'))\n\n    \n  }\n)\n\n\n\n",
    "created" : 1477551731539.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "903217230",
    "id" : "443766C1",
    "lastKnownWriteTime" : 1478512575,
    "last_content_update" : 1478512575318,
    "path" : "C:/Worksies/hots/shiny/server.R",
    "project_path" : "shiny/server.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}